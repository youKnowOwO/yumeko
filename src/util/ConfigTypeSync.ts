/* eslint-disable @typescript-eslint/ban-types */
import chalk from "chalk";
import { promises } from "fs";

const config: object = require("../../config.json");

function parse(data: any, indent = 1): string {
    const type = typeof data;
    if (data instanceof Array) return parseArray(data, indent);
    if (type === "object") return parseObject(data, indent);
    return type;
}

function parseObject(data: Record<string, never> | null, indent: number): string {
    if (data === null) return "null";
    const space = " ".repeat(indent * 4);
    const types = [];
    for (const x of Object.keys(data)) types.push(`${space}${x}: ${parse(data[x], indent + 1)};`);
    return types.length ? `{\n${types.join("\n")}\n${space.slice(4)}}` : "{}";
}

function parseArray<T>(data: T[], indent: number): string {
    const parsed = parse(data[0], indent);
    return `${parsed}[]`;
}

void async function exec(): Promise<void> {
    const toWrite = `// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.\n\nexport interface Config ${parse(config)}`;
    await promises.writeFile("./src/interfaces/Config.ts", toWrite);
    process.stdout.write(chalk`{bgGreen {black \ DONE }} Config sucessfully sync`);
    process.stdout.write("\n");
}();